package com.practicaCodigoAprendido.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;


import com.practicaCodigoAprendido.model.Product;
import com.practicaCodigoAprendido.respository.ProductRespository;


@RunWith(MockitoJUnitRunner.class)
@SpringBootTest
class ProductServiceTest {
	
	@Mock
	private ProductRespository productRepository;

	@Autowired
	private ProductService productService;
	
	@Before
	public void setup() {
		productService = new ProductServiceImpl(productRepository);
	}
	
	@Test
	void testFindAll() {
		List<Product> actual = productService.findAll();
		when(productRepository.findAll()).thenReturn(actual);
		assertThat(actual).size().isGreaterThan(0);
	}

	@Test
	void testCreated() {
		Product computer = Product.builder()
				.idProduct(6L)
				.name("computer")
				.price(60000.00)
				.build();
		when(productRepository.save(computer)).thenReturn(computer);
		Product find = productService.findByName("computer");
		assertThat(find.getName()).isEqualTo("computer");
	}

	@Test
	void testFindById() {
		Long idProduct = 1L;
		Product findById = productService.findById(idProduct);
		assertThat(findById.getIdProduct()).isEqualTo(idProduct);
		
	}

	@Test
	void testFindByName() {
		String name = "iphone";
		when(productRepository.findByName(name)).thenReturn();
		assertThat(productService.findByName(name)).isEqualTo(name);
//		Product findByName = productService.findByName(name);
//		assertThat(findByName.getName()).isEqualTo(name);
	}

	@Test
	void testUpdate() {
		Product laptop = Product.builder()
				.name("laptop")
				.price(50000.00)
				.build();
		laptop.setIdProduct(4L);
		productRepository.save(laptop);
		assertThat(laptop.getName()).isEqualTo("laptop");
	}

	@Test
	void testDelete() {
		long idProduct = 4L;
		boolean deleteProduct = productRepository.findById(idProduct).isPresent();
		assertTrue(deleteProduct);
		
	}

}
